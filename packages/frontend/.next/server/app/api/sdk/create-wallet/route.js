/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/sdk/create-wallet/route";
exports.ids = ["app/api/sdk/create-wallet/route"];
exports.modules = {

/***/ "(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsdk%2Fcreate-wallet%2Froute&page=%2Fapi%2Fsdk%2Fcreate-wallet%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsdk%2Fcreate-wallet%2Froute.ts&appDir=%2FUsers%2Fadmin%2FDocuments%2Fprojects%2Fmycelium-sdk%2Fpackages%2Ffrontend%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadmin%2FDocuments%2Fprojects%2Fmycelium-sdk%2Fpackages%2Ffrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsdk%2Fcreate-wallet%2Froute&page=%2Fapi%2Fsdk%2Fcreate-wallet%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsdk%2Fcreate-wallet%2Froute.ts&appDir=%2FUsers%2Fadmin%2FDocuments%2Fprojects%2Fmycelium-sdk%2Fpackages%2Ffrontend%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadmin%2FDocuments%2Fprojects%2Fmycelium-sdk%2Fpackages%2Ffrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/../../node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/../../node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/../../node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/../../node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/../../node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/../../node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/../../node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/../../node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/../../node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/../../node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/../../node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/../../node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/../../node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/../../node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_admin_Documents_projects_mycelium_sdk_packages_frontend_src_app_api_sdk_create_wallet_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/sdk/create-wallet/route.ts */ \"(rsc)/./src/app/api/sdk/create-wallet/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/sdk/create-wallet/route\",\n        pathname: \"/api/sdk/create-wallet\",\n        filename: \"route\",\n        bundlePath: \"app/api/sdk/create-wallet/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"/Users/admin/Documents/projects/mycelium-sdk/packages/frontend/src/app/api/sdk/create-wallet/route.ts\",\n    nextConfigOutput,\n    userland: _Users_admin_Documents_projects_mycelium_sdk_packages_frontend_src_app_api_sdk_create_wallet_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/sdk/create-wallet/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsdk%2Fcreate-wallet%2Froute&page=%2Fapi%2Fsdk%2Fcreate-wallet%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsdk%2Fcreate-wallet%2Froute.ts&appDir=%2FUsers%2Fadmin%2FDocuments%2Fprojects%2Fmycelium-sdk%2Fpackages%2Ffrontend%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadmin%2FDocuments%2Fprojects%2Fmycelium-sdk%2Fpackages%2Ffrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \**********************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/../sdk/dist/index.js":
/*!****************************!*\
  !*** ../sdk/dist/index.js ***!
  \****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MyceliumSDK: () => (/* binding */ MyceliumSDK),\n/* harmony export */   \"default\": () => (/* binding */ index_default)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem */ \"(rsc)/../sdk/node_modules/viem/_esm/clients/createPublicClient.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(rsc)/../sdk/node_modules/viem/_esm/clients/transports/http.js\");\n/* harmony import */ var viem_account_abstraction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem/account-abstraction */ \"(rsc)/../sdk/node_modules/viem/_esm/account-abstraction/clients/createBundlerClient.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! viem/chains */ \"(rsc)/../sdk/node_modules/viem/_esm/chains/index.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem/chains */ \"(rsc)/../sdk/node_modules/viem/_esm/chains/definitions/unichain.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! viem */ \"(rsc)/../sdk/node_modules/viem/_esm/utils/data/pad.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! viem */ \"(rsc)/../sdk/node_modules/viem/_esm/utils/abi/encodeFunctionData.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! viem */ \"(rsc)/../sdk/node_modules/viem/_esm/constants/abis.js\");\n/* harmony import */ var viem_account_abstraction__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! viem/account-abstraction */ \"(rsc)/../sdk/node_modules/viem/_esm/account-abstraction/accounts/implementations/toCoinbaseSmartAccount.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! viem */ \"(rsc)/../sdk/node_modules/viem/_esm/utils/unit/formatEther.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! viem */ \"(rsc)/../sdk/node_modules/viem/_esm/utils/unit/formatUnits.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem/chains */ \"(rsc)/../sdk/node_modules/viem/_esm/chains/definitions/mainnet.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem/chains */ \"(rsc)/../sdk/node_modules/viem/_esm/chains/definitions/base.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! viem/chains */ \"(rsc)/../sdk/node_modules/viem/_esm/chains/definitions/baseSepolia.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! viem/chains */ \"(rsc)/../sdk/node_modules/viem/_esm/chains/definitions/sepolia.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! viem */ \"(rsc)/../sdk/node_modules/viem/_esm/utils/unit/parseUnits.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! viem */ \"(rsc)/../sdk/node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var _privy_io_server_auth_viem__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @privy-io/server-auth/viem */ \"(rsc)/../sdk/node_modules/@privy-io/server-auth/dist/esm/viem.mjs\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! viem */ \"(rsc)/../sdk/node_modules/viem/_esm/clients/createWalletClient.js\");\n/* harmony import */ var _privy_io_server_auth__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @privy-io/server-auth */ \"(rsc)/../sdk/node_modules/@privy-io/server-auth/dist/esm/index.mjs\");\n// src/tools/ChainManager.ts\n\n\n// src/utils/chains.ts\n\n\nvar chainById = Object.values(viem_chains__WEBPACK_IMPORTED_MODULE_0__).reduce((acc, maybeChain)=>{\n    if (maybeChain && typeof maybeChain === \"object\" && \"id\" in maybeChain && typeof maybeChain.id === \"number\" && \"name\" in maybeChain) {\n        const chain = maybeChain;\n        acc[chain.id] = chain;\n    }\n    return acc;\n}, {});\n// src/tools/ChainManager.ts\nvar ChainManager = class {\n    /**\n   * Initialize the ChainManager with chain configurations\n   * @param chains - Array of chain configurations\n   */ constructor(chains){\n        this.chainConfigs = chains;\n        this.publicClients = this.createPublicClients(chains);\n    }\n    /**\n   * Get public client for a specific chain\n   * @param chainId - The chain ID to retrieve the public client for\n   * @returns PublicClient instance for the specified chain\n   * @throws Error if no client is configured for the chain ID\n   */ getPublicClient(chainId) {\n        const client = this.publicClients.get(chainId);\n        if (!client) {\n            throw new Error(`No public client configured for chain ID: ${chainId}`);\n        }\n        return client;\n    }\n    /**\n   * Get bundler client for a specific chain\n   * @param chainId - The chain ID to retrieve the bundler client for\n   * @param account - SmartAccount to use with the bundler client\n   * @returns BundlerClient instance for the specified chain\n   * @throws Error if no bundler URL is configured for the chain ID\n   */ getBundlerClient(chainId, account) {\n        const bundlerUrl = this.getBundlerUrl(chainId);\n        if (!bundlerUrl) {\n            throw new Error(`No bundler URL configured for chain ID: ${chainId}`);\n        }\n        const client = (0,viem__WEBPACK_IMPORTED_MODULE_1__.createPublicClient)({\n            chain: this.getChain(chainId),\n            transport: (0,viem__WEBPACK_IMPORTED_MODULE_2__.http)(bundlerUrl)\n        });\n        return (0,viem_account_abstraction__WEBPACK_IMPORTED_MODULE_3__.createBundlerClient)({\n            account,\n            client,\n            transport: (0,viem__WEBPACK_IMPORTED_MODULE_2__.http)(bundlerUrl),\n            chain: this.getChain(chainId)\n        });\n    }\n    /**\n   * Get RPC URL for a specific chain\n   * @param chainId - The chain ID to retrieve the RPC URL for\n   * @returns RPC URL as a string\n   * @throws Error if no chain config is found for the chain ID\n   */ getRpcUrl(chainId) {\n        const chainConfig = this.chainConfigs.find((c)=>c.chainId === chainId);\n        if (!chainConfig) {\n            throw new Error(`No chain config found for chain ID: ${chainId}`);\n        }\n        return chainConfig.rpcUrl;\n    }\n    /**\n   * Get bundler URL for a specific chain\n   * @param chainId - The chain ID to retrieve the bundler URL for\n   * @returns Bundler URL as a string or undefined if not configured\n   * @throws Error if no chain config is found for the chain ID\n   */ getBundlerUrl(chainId) {\n        const chainConfig = this.chainConfigs.find((c)=>c.chainId === chainId);\n        if (!chainConfig) {\n            throw new Error(`No chain config found for chain ID: ${chainId}`);\n        }\n        return chainConfig.bundlerUrl;\n    }\n    /**\n   * Get chain information for a specific chain ID\n   * @param chainId - The chain ID to retrieve information for\n   * @returns Chain object containing chain details\n   */ getChain(chainId) {\n        const chain = chainById[chainId];\n        if (!chain) {\n            throw new Error(`Chain not found for ID: ${chainId}`);\n        }\n        return chain;\n    }\n    /**\n   * Get all supported chain IDs\n   * @returns Array of supported chain IDs\n   */ getSupportedChains() {\n        return this.chainConfigs.map((c)=>c.chainId);\n    }\n    /**\n   * Create public clients for all configured chains\n   * @param chains - Array of chain configurations\n   * @returns Map of chain IDs to their corresponding public clients\n   * @throws Error if a chain is not found or already configured\n   */ createPublicClients(chains) {\n        const clients = /* @__PURE__ */ new Map();\n        for (const chainConfig of chains){\n            const chain = chainById[chainConfig.chainId];\n            if (!chain) {\n                throw new Error(`Chain not found for ID: ${chainConfig.chainId}`);\n            }\n            if (clients.has(chainConfig.chainId)) {\n                throw new Error(`Public client already configured for chain ID: ${chainConfig.chainId}`);\n            }\n            const client = (0,viem__WEBPACK_IMPORTED_MODULE_1__.createPublicClient)({\n                chain,\n                transport: (0,viem__WEBPACK_IMPORTED_MODULE_2__.http)(chainConfig.rpcUrl)\n            });\n            clients.set(chainConfig.chainId, client);\n        }\n        return clients;\n    }\n};\n// src/wallet/base/providers/SmartWalletProvider.ts\nvar SmartWalletProvider = class {\n};\n// src/wallet/WalletNamespace.ts\nvar WalletNamespace = class {\n    constructor(provider){\n        this.provider = provider;\n    }\n    /**\n   * Get direct access to the embedded wallet provider\n   * @description Provides direct access to the underlying embedded wallet provider when\n   * advanced functionality beyond the unified interface is needed\n   * @returns The configured embedded wallet provider instance\n   */ get embeddedWalletProvider() {\n        return this.provider.embeddedWalletProvider;\n    }\n    /**\n   * Get direct access to the smart wallet provider\n   * @description Provides direct access to the underlying smart wallet provider when\n   * advanced functionality beyond the unified interface is needed\n   * @returns The configured smart wallet provider instance\n   */ get smartWalletProvider() {\n        return this.provider.smartWalletProvider;\n    }\n    /**\n   * Create a new embedded wallet\n   * @description Creates only an embedded wallet using the configured embedded wallet provider.\n   * @returns Promise resolving to the created embedded wallet instance\n   */ async createEmbeddedWallet() {\n        return this.provider.createEmbeddedWallet();\n    }\n    /**\n   * Create a new smart wallet\n   * @description Creates only a smart wallet using the configured smart wallet provider.\n   * This is useful when you already have a signer and want to create a smart wallet without\n   * creating an embedded wallet. You must provide your own signer and owners array.\n   * @param params - Smart wallet creation parameters\n   * @param params.owners - Array of owners for the smart wallet (addresses or WebAuthn public keys)\n   * @param params.signer - Local account used for signing transactions\n   * @param params.nonce - Optional nonce for smart wallet address generation (defaults to 0)\n   * @returns Promise resolving to the created smart wallet instance\n   */ async createSmartWallet(params) {\n        return this.provider.createSmartWallet(params);\n    }\n    /**\n   * Create a new smart wallet with embedded wallet as signer\n   * @description Creates both an embedded wallet and a smart wallet, with the embedded wallet\n   * automatically added as one of the owners/signers of the smart wallet.\n   * @param params - Optional wallet creation parameters\n   * @param params.owners - Optional array of additional owners for the smart wallet. The embedded wallet will be added to this array at the specified index.\n   * @param params.embeddedWalletIndex - Optional index where the embedded wallet should be inserted in the owners array. If not specified, embedded wallet is added to the end of the array.\n   * @param params.nonce - Optional nonce for smart wallet address generation (defaults to 0)\n   * @returns Promise resolving to the created smart wallet instance\n   */ async createWalletWithEmbeddedSigner(params) {\n        return this.provider.createWalletWithEmbeddedSigner(params);\n    }\n    /**\n   * Get an existing smart wallet using embedded wallet as signer\n   * @description Retrieves an embedded wallet by walletId and uses it as the signer to get\n   * the corresponding smart wallet. If neither walletAddress nor deploymentOwners is provided,\n   * defaults to using the embedded wallet as the single owner. This is useful when you have\n   * an embedded wallet ID and want to access the associated smart wallet functionality.\n   * @param params - Wallet retrieval parameters\n   * @param params.walletId - ID of the embedded wallet to use as signer\n   * @param params.deploymentOwners - Optional array of original deployment owners for smart wallet address calculation. If not provided and walletAddress is also not provided, defaults to using the embedded wallet as single owner.\n   * @param params.signerOwnerIndex - Current index of the signer in the smart wallet's current owners array (used for transaction signing). Defaults to 0 if not specified. This may differ from the original deployment index if owners have been modified.\n   * @param params.walletAddress - Optional explicit smart wallet address (skips address calculation)\n   * @param params.nonce - Optional nonce used during smart wallet creation\n   * @returns Promise resolving to the smart wallet instance with embedded wallet as signer\n   * @throws Error if embedded wallet is not found\n   */ async getSmartWalletWithEmbeddedSigner(params) {\n        return this.provider.getSmartWalletWithEmbeddedSigner(params);\n    }\n    /**\n   * Get an existing embedded wallet\n   * @description Retrieves an embedded wallet by walletId. This is useful when you have an embedded wallet ID and\n   * want to access the associated embedded wallet functionality.\n   * @param params - Wallet retrieval parameters\n   * @param params.walletId - ID of the embedded wallet to retrieve\n   * @returns Promise resolving to the embedded wallet instance\n   */ async getEmbeddedWallet(params) {\n        return this.provider.getEmbeddedWallet(params);\n    }\n    /**\n   * Get an existing smart wallet with a provided signer\n   * @description Retrieves a smart wallet using a directly provided signer. This is useful when\n   * you already have a LocalAccount signer and want to access an existing smart wallet without\n   * going through the embedded wallet provider. Use this instead of getSmartWalletWithEmbeddedSigner\n   * when you have direct control over the signer.\n   * @param signer - Local account to use for signing transactions on the smart wallet\n   * @param getWalletParams - Wallet retrieval parameters\n   * @param getWalletParams.deploymentOwners - Array of original deployment owners for smart wallet address calculation. Required if walletAddress not provided. Must match the exact owners array used during wallet deployment.\n   * @param getWalletParams.signerOwnerIndex - Current index of the signer in the smart wallet's current owners array (used for transaction signing). Defaults to 0 if not specified. This may differ from the original deployment index if owners have been modified.\n   * @param getWalletParams.walletAddress - Optional explicit smart wallet address (skips address calculation)\n   * @param getWalletParams.nonce - Optional nonce used during smart wallet creation\n   * @returns Promise resolving to the smart wallet instance with the provided signer\n   * @throws Error if neither walletAddress nor deploymentOwners provided\n   */ async getSmartWallet(params) {\n        return this.provider.getSmartWallet(params);\n    }\n};\n// src/index.ts\n\n// src/wallet/providers/DefaultSmartWalletProvider.ts\n\n\n// src/abis/smartWalletFactory.ts\nvar smartWalletFactoryAbi = [\n    {\n        type: \"constructor\",\n        inputs: [\n            {\n                name: \"implementation_\",\n                type: \"address\",\n                internalType: \"address\"\n            }\n        ],\n        stateMutability: \"payable\"\n    },\n    {\n        type: \"function\",\n        name: \"createAccount\",\n        inputs: [\n            {\n                name: \"owners\",\n                type: \"bytes[]\",\n                internalType: \"bytes[]\"\n            },\n            {\n                name: \"nonce\",\n                type: \"uint256\",\n                internalType: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"account\",\n                type: \"address\",\n                internalType: \"contract CoinbaseSmartWallet\"\n            }\n        ],\n        stateMutability: \"payable\"\n    },\n    {\n        type: \"function\",\n        name: \"getAddress\",\n        inputs: [\n            {\n                name: \"owners\",\n                type: \"bytes[]\",\n                internalType: \"bytes[]\"\n            },\n            {\n                name: \"nonce\",\n                type: \"uint256\",\n                internalType: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"address\"\n            }\n        ],\n        stateMutability: \"view\"\n    },\n    {\n        type: \"function\",\n        name: \"implementation\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\",\n                internalType: \"address\"\n            }\n        ],\n        stateMutability: \"view\"\n    },\n    {\n        type: \"function\",\n        name: \"initCodeHash\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bytes32\",\n                internalType: \"bytes32\"\n            }\n        ],\n        stateMutability: \"view\"\n    },\n    {\n        type: \"event\",\n        name: \"AccountCreated\",\n        inputs: [\n            {\n                name: \"account\",\n                type: \"address\",\n                indexed: true,\n                internalType: \"address\"\n            },\n            {\n                name: \"owners\",\n                type: \"bytes[]\",\n                indexed: false,\n                internalType: \"bytes[]\"\n            },\n            {\n                name: \"nonce\",\n                type: \"uint256\",\n                indexed: false,\n                internalType: \"uint256\"\n            }\n        ],\n        anonymous: false\n    },\n    {\n        type: \"error\",\n        name: \"ImplementationUndeployed\",\n        inputs: []\n    },\n    {\n        type: \"error\",\n        name: \"OwnerRequired\",\n        inputs: []\n    }\n];\n// src/constants/addresses.ts\nvar smartWalletFactoryAddress = \"0xBA5ED110eFDBa3D005bfC882d75358ACBbB85842\";\n// src/wallet/DefaultSmartWallet.ts\n\n\n\n// src/tools/TokenBalance.ts\n\n// src/constants/tokens.ts\n\nvar SUPPORTED_TOKENS = {\n    ETH: {\n        symbol: \"ETH\",\n        name: \"Ethereum\",\n        decimals: 18,\n        addresses: {\n            [viem_chains__WEBPACK_IMPORTED_MODULE_4__.mainnet.id]: \"0x0000000000000000000000000000000000000000\",\n            [viem_chains__WEBPACK_IMPORTED_MODULE_5__.unichain.id]: \"0x0000000000000000000000000000000000000000\",\n            [viem_chains__WEBPACK_IMPORTED_MODULE_6__.base.id]: \"0x0000000000000000000000000000000000000000\",\n            [viem_chains__WEBPACK_IMPORTED_MODULE_7__.baseSepolia.id]: \"0x0000000000000000000000000000000000000000\",\n            [viem_chains__WEBPACK_IMPORTED_MODULE_8__.sepolia.id]: \"0x0000000000000000000000000000000000000000\"\n        }\n    },\n    USDC: {\n        symbol: \"USDC\",\n        name: \"USDC\",\n        decimals: 6,\n        addresses: {\n            [viem_chains__WEBPACK_IMPORTED_MODULE_4__.mainnet.id]: \"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\n            [viem_chains__WEBPACK_IMPORTED_MODULE_5__.unichain.id]: \"0x078d782b760474a361dda0af3839290b0ef57ad6\",\n            [viem_chains__WEBPACK_IMPORTED_MODULE_7__.baseSepolia.id]: \"0x036CbD53842c5426634e7929541eC2318f3dCF7e\",\n            [viem_chains__WEBPACK_IMPORTED_MODULE_8__.sepolia.id]: \"0xf08A50178dfcDe18524640EA6618a1f965821715\"\n        }\n    }\n};\n// src/utils/tokens.ts\nfunction getTokenAddress(symbol, chainId) {\n    const token = SUPPORTED_TOKENS[symbol];\n    return token?.addresses[chainId] || null;\n}\n// src/tools/TokenBalance.ts\nasync function fetchETHBalance(chainManager, walletAddress) {\n    const supportedChains = chainManager.getSupportedChains();\n    const chainBalancePromises = supportedChains.map(async (chainId)=>{\n        const publicClient = chainManager.getPublicClient(chainId);\n        const balance = await publicClient.getBalance({\n            address: walletAddress\n        });\n        return {\n            chainId,\n            balance,\n            formattedBalance: (0,viem__WEBPACK_IMPORTED_MODULE_9__.formatEther)(balance)\n        };\n    });\n    const chainBalances = await Promise.all(chainBalancePromises);\n    const totalBalance = chainBalances.reduce((total, { balance })=>total + balance, 0n);\n    return {\n        symbol: \"ETH\",\n        totalBalance,\n        totalFormattedBalance: (0,viem__WEBPACK_IMPORTED_MODULE_9__.formatEther)(totalBalance),\n        chainBalances\n    };\n}\nasync function fetchERC20Balance(chainManager, walletAddress, token) {\n    const supportedChains = chainManager.getSupportedChains();\n    const chainsWithToken = supportedChains.filter((chainId)=>getTokenAddress(token.symbol, chainId));\n    const chainBalancePromises = chainsWithToken.map(async (chainId)=>{\n        const balance = await fetchERC20BalanceForChain(token, chainId, walletAddress, chainManager);\n        return {\n            chainId,\n            balance,\n            formattedBalance: (0,viem__WEBPACK_IMPORTED_MODULE_10__.formatUnits)(balance, token.decimals)\n        };\n    });\n    const chainBalances = await Promise.all(chainBalancePromises);\n    const totalBalance = chainBalances.reduce((total, { balance })=>total + balance, 0n);\n    return {\n        symbol: token.symbol,\n        totalBalance,\n        totalFormattedBalance: (0,viem__WEBPACK_IMPORTED_MODULE_10__.formatUnits)(totalBalance, token.decimals),\n        chainBalances\n    };\n}\nasync function fetchERC20BalanceForChain(token, chainId, walletAddress, chainManager) {\n    const tokenAddress = getTokenAddress(token.symbol, chainId);\n    if (!tokenAddress) {\n        throw new Error(`${token.symbol} not supported on chain ${chainId}`);\n    }\n    const publicClient = chainManager.getPublicClient(chainId);\n    if (token.symbol === \"ETH\") {\n        return publicClient.getBalance({\n            address: walletAddress\n        });\n    }\n    return publicClient.readContract({\n        address: tokenAddress,\n        abi: viem__WEBPACK_IMPORTED_MODULE_11__.erc20Abi,\n        functionName: \"balanceOf\",\n        args: [\n            walletAddress\n        ]\n    });\n}\n// src/utils/assets.ts\n\nfunction resolveAsset(asset, chainId) {\n    if (asset.startsWith(\"0x\")) {\n        const address2 = asset;\n        for (const [, tokenInfo2] of Object.entries(SUPPORTED_TOKENS)){\n            const tokenAddress = tokenInfo2.addresses[chainId];\n            if (tokenAddress && tokenAddress.toLowerCase() === address2.toLowerCase()) {\n                return {\n                    address: tokenAddress,\n                    symbol: tokenInfo2.symbol,\n                    decimals: tokenInfo2.decimals\n                };\n            }\n        }\n        throw new Error(`Unknown asset address: ${address2}. Please use a supported asset symbol like 'usdc' or add the token to SUPPORTED_TOKENS.`);\n    }\n    const normalizedSymbol = asset.toUpperCase();\n    const tokenInfo = SUPPORTED_TOKENS[normalizedSymbol];\n    if (!tokenInfo) {\n        const availableSymbols = Object.keys(SUPPORTED_TOKENS).join(\", \");\n        throw new Error(`Unsupported asset symbol: ${asset}. Supported assets: ${availableSymbols}`);\n    }\n    const address = getTokenAddress(normalizedSymbol, chainId);\n    if (!address) {\n        throw new Error(`Asset ${asset} is not supported on chain ${chainId}. Available chains: ${Object.keys(tokenInfo.addresses).join(\", \")}`);\n    }\n    return {\n        address,\n        symbol: tokenInfo.symbol,\n        decimals: tokenInfo.decimals\n    };\n}\nfunction parseAssetAmount(amount, decimals) {\n    const amountStr = amount.toString();\n    return (0,viem__WEBPACK_IMPORTED_MODULE_12__.parseUnits)(amountStr, decimals);\n}\n// src/wallet/base/wallets/SmartWallet.ts\nvar SmartWallet = class {\n};\n// src/wallet/DefaultSmartWallet.ts\nvar DefaultSmartWallet = class extends SmartWallet {\n    /**\n     * Create a Smart Wallet instance\n     * @param owners - Array of wallet owners (addresses or WebAuthn accounts)\n     * @param signer - Local account for signing transactions\n     * @param chainManager - Network management service\n  //    * @param lendProvider - Lending operations provider\n     * @param bundlerUrl - ERC-4337 bundler service URL\n     * @param deploymentAddress - Known wallet address (if already deployed)\n     * @param ownerIndex - Index of signer in owners array\n     * @param nonce - Nonce for address generation\n     */ constructor(owners, signer, chainManager, deploymentAddress, signerOwnerIndex, nonce){\n        super();\n        this.owners = owners;\n        this._signer = signer;\n        this.signerOwnerIndex = signerOwnerIndex;\n        this.deploymentAddress = deploymentAddress;\n        this.chainManager = chainManager;\n        this.nonce = nonce;\n    }\n    /**\n   * Get the signer account for this smart wallet\n   * @description Returns the LocalAccount instance used for signing transactions and UserOperations.\n   * This signer is used to authorize operations on behalf of the smart wallet.\n   * @returns The LocalAccount signer configured for this smart wallet\n   */ get signer() {\n        return this._signer;\n    }\n    /**\n   * Get the smart wallet address\n   * @description Returns the deployment address if known, otherwise calculates the deterministic\n   * address using CREATE2 based on owners and nonce.\n   * @returns Promise resolving to the wallet address\n   */ async getAddress() {\n        if (this.deploymentAddress) return this.deploymentAddress;\n        const owners_bytes = this.owners.map((owner)=>{\n            if (typeof owner === \"string\") return (0,viem__WEBPACK_IMPORTED_MODULE_13__.pad)(owner);\n            if (owner.type === \"webAuthn\") return owner.publicKey;\n            throw new Error(\"invalid owner type\");\n        });\n        const supportedChains = this.chainManager.getSupportedChains();\n        if (!supportedChains.length) {\n            throw new Error(\"No supported chains configured\");\n        }\n        const publicClient = this.chainManager.getPublicClient(supportedChains[0]);\n        const smartWalletAddress = await publicClient.readContract({\n            abi: smartWalletFactoryAbi,\n            address: smartWalletFactoryAddress,\n            functionName: \"getAddress\",\n            args: [\n                owners_bytes,\n                this.nonce || 0n\n            ]\n        });\n        return smartWalletAddress;\n    }\n    /**\n   * Create a Coinbase Smart Account instance\n   * @description Converts this wallet into a viem-compatible smart account for ERC-4337 operations.\n   * @param chainId - Target blockchain network ID\n   * @returns Coinbase Smart Account instance configured for the specified chain\n   */ async getCoinbaseSmartAccount(chainId) {\n        return (0,viem_account_abstraction__WEBPACK_IMPORTED_MODULE_14__.toCoinbaseSmartAccount)({\n            address: this.deploymentAddress,\n            ownerIndex: this.signerOwnerIndex,\n            client: this.chainManager.getPublicClient(chainId),\n            owners: [\n                this.signer\n            ],\n            nonce: this.nonce,\n            version: \"1.1\"\n        });\n    }\n    /**\n   * Get asset balances across all supported chains\n   * @description Fetches ETH and ERC20 token balances for this wallet across all supported networks.\n   * @returns Promise resolving to array of token balances with chain breakdown\n   */ async getBalance() {\n        const address = await this.getAddress();\n        const tokenBalancePromises = Object.values(SUPPORTED_TOKENS).map(async (token)=>{\n            return fetchERC20Balance(this.chainManager, address, token);\n        });\n        const ethBalancePromise = fetchETHBalance(this.chainManager, address);\n        return Promise.all([\n            ethBalancePromise,\n            ...tokenBalancePromises\n        ]);\n    }\n    //   /**\n    //    * Lend assets to a lending market\n    //    * @description Lends assets using the configured lending provider with human-readable amounts\n    //    * @param amount - Human-readable amount to lend (e.g. 1.5)\n    //    * @param asset - Asset symbol (e.g. 'usdc') or token address\n    //    * @param marketId - Optional specific market ID or vault name\n    //    * @param options - Optional lending configuration\n    //    * @returns Promise resolving to lending transaction details\n    //    * @throws Error if no lending provider is configured\n    //    */\n    //   async lend(\n    //     amount: number,\n    //     asset: AssetIdentifier,\n    //     chainId: SupportedChainId,\n    //     marketId?: string,\n    //     options?: LendOptions\n    //   ): Promise<LendTransaction> {\n    //     // Parse human-readable inputs\n    //     const { amount: parsedAmount, asset: resolvedAsset } = parseLendParams(\n    //       amount,\n    //       asset,\n    //       chainId\n    //     );\n    //     const address = await this.getAddress();\n    //     // Set receiver to wallet address if not specified\n    //     const lendOptions: LendOptions = {\n    //       ...options,\n    //       receiver: options?.receiver || address,\n    //     };\n    //     const result = await this.lendProvider.deposit(\n    //       resolvedAsset.address,\n    //       parsedAmount,\n    //       marketId,\n    //       lendOptions\n    //     );\n    //     return result;\n    //   }\n    /**\n   * Send a transaction via ERC-4337\n   * @description Executes a transaction using the smart wallet with automatic gas sponsorship.\n   * The transaction is sent as a UserOperation through the bundler service.\n   * @param transactionData - Transaction details (to, value, data)\n   * @param chainId - Target blockchain network ID\n   * @returns Promise resolving to UserOperation hash\n   * @throws Error if transaction fails or validation errors occur\n   */ async send(transactionData, chainId) {\n        try {\n            const account = await this.getCoinbaseSmartAccount(chainId);\n            const bundlerClient = this.chainManager.getBundlerClient(chainId, account);\n            const calls = [\n                transactionData\n            ];\n            const hash = await bundlerClient.sendUserOperation({\n                account,\n                calls,\n                paymaster: true\n            });\n            await bundlerClient.waitForUserOperationReceipt({\n                hash\n            });\n            return hash;\n        } catch (error) {\n            throw new Error(`Failed to send transaction: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n        }\n    }\n    /**\n   * Fund a wallet with USDC using on-ramp service\n   * @description Funds the current wallet with USDC using on-ramp service\n   * @returns Return URL to the on-ramp service\n   */ fundUSDC() {}\n    /**\n   * Send tokens to another address\n   * @description Sends ETH or ERC20 tokens to a recipient address\n   * @param amount - Human-readable amount to send (e.g. 1.5)\n   * @param asset - Asset symbol (e.g. 'usdc', 'eth') or token address\n   * @param recipientAddress - Address to send to\n   * @returns Promise resolving to transaction data\n   * @throws Error if wallet is not initialized or asset is not supported\n   */ async sendTokens(amount, asset, recipientAddress) {\n        if (!recipientAddress) {\n            throw new Error(\"Recipient address is required\");\n        }\n        if (amount <= 0) {\n            throw new Error(\"Amount must be greater than 0\");\n        }\n        const chainId = viem_chains__WEBPACK_IMPORTED_MODULE_5__.unichain.id;\n        if (asset.toLowerCase() === \"eth\") {\n            const parsedAmount2 = parseAssetAmount(amount, 18);\n            return {\n                to: recipientAddress,\n                value: parsedAmount2,\n                data: \"0x\"\n            };\n        }\n        const resolvedAsset = resolveAsset(asset, chainId);\n        const parsedAmount = parseAssetAmount(amount, resolvedAsset.decimals);\n        const transferData = (0,viem__WEBPACK_IMPORTED_MODULE_15__.encodeFunctionData)({\n            abi: viem__WEBPACK_IMPORTED_MODULE_11__.erc20Abi,\n            functionName: \"transfer\",\n            args: [\n                recipientAddress,\n                parsedAmount\n            ]\n        });\n        return {\n            to: resolvedAsset.address,\n            value: 0n,\n            data: transferData\n        };\n    }\n};\n// src/wallet/providers/DefaultSmartWalletProvider.ts\nvar DefaultSmartWalletProvider = class extends SmartWalletProvider {\n    /** Provider for lending market operations */ //   private lendProvider: LendProvider;\n    /**\n   * Initialize the Smart Wallet Provider\n   * @param chainManager - Manages supported blockchain networks\n   * @param paymasterAndBundlerUrl - URL for ERC-4337 bundler and paymaster services\n   * @param lendProvider - Provider for lending market operations\n   */ constructor(chainManager){\n        super();\n        this.chainManager = chainManager;\n    }\n    /**\n   * Create a new smart wallet instance\n   * @description Creates a new smart wallet that will be deployed on first transaction.\n   * The wallet address is deterministically calculated from owners and nonce.\n   * @param owners - Array of wallet owners (addresses or WebAuthn public keys)\n   * @param signer - Local account used for signing transactions\n   * @param nonce - Optional nonce for address generation (defaults to 0)\n   * @returns Promise resolving to a new SmartWallet instance\n   */ async createWallet(params) {\n        const { owners, signer, nonce } = params;\n        return new DefaultSmartWallet(owners, signer, this.chainManager, //   this.lendProvider,\n        void 0, void 0, nonce);\n    }\n    /**\n   * Get the predicted smart wallet address\n   * @description Calculates the deterministic address where a smart wallet would be deployed\n   * given the specified owners and nonce. Uses CREATE2 for address prediction.\n   * @param params.owners - Array of wallet owners (addresses or WebAuthn public keys)\n   * @param params.nonce - Nonce for address generation (defaults to 0)\n   * @returns Promise resolving to the predicted wallet address\n   */ async getWalletAddress(params) {\n        const { owners, nonce = 0n } = params;\n        const owners_bytes = owners.map((owner)=>{\n            if (typeof owner === \"string\") return (0,viem__WEBPACK_IMPORTED_MODULE_13__.pad)(owner);\n            if (owner.type === \"webAuthn\") return owner.publicKey;\n            throw new Error(\"invalid owner type\");\n        });\n        const supportedChains = this.chainManager.getSupportedChains();\n        if (!supportedChains.length) {\n            throw new Error(\"No supported chains configured\");\n        }\n        const publicClient = this.chainManager.getPublicClient(supportedChains[0]);\n        const smartWalletAddress = await publicClient.readContract({\n            abi: smartWalletFactoryAbi,\n            address: smartWalletFactoryAddress,\n            functionName: \"getAddress\",\n            args: [\n                owners_bytes,\n                nonce\n            ]\n        });\n        return smartWalletAddress;\n    }\n    /**\n   * Get an existing smart wallet instance\n   * @description Creates a SmartWallet instance for an already deployed wallet.\n   * Use this when you know the wallet address and want to interact with it.\n   * @param params.walletAddress - Address of the deployed smart wallet\n   * @param params.signer - Local account used for signing transactions\n   * @param params.ownerIndex - Index of the signer in the wallet's owner list (defaults to 0)\n   * @returns SmartWallet instance\n   */ getWallet(params) {\n        const { walletAddress, signer, ownerIndex } = params;\n        return new DefaultSmartWallet([\n            signer.address\n        ], signer, this.chainManager, //   this.lendProvider,\n        walletAddress, ownerIndex);\n    }\n    /**\n   * Fund the wallet via a faucet\n   * @description Funds the current wallet via a faucet. Can only work if a selected chain is supported by a faucet and is a test network.\n   * @param chainId - Chain ID\n   * @returns Promise resolving to the transaction hash\n   */ fundViaFaucet() {}\n};\n// src/wallet/WalletProvider.ts\nvar WalletProvider = class {\n    constructor(embeddedWalletProvider, smartWalletProvider){\n        this.embeddedWalletProvider = embeddedWalletProvider;\n        this.smartWalletProvider = smartWalletProvider;\n    }\n    /**\n   * Create a new embedded wallet\n   * @description Creates only an embedded wallet using the configured embedded wallet provider.\n   * @returns Promise resolving to the created embedded wallet instance\n   */ async createEmbeddedWallet() {\n        return this.embeddedWalletProvider.createWallet();\n    }\n    /**\n   * Create a new smart wallet\n   * @description Creates only a smart wallet using the configured smart wallet provider.\n   * This is useful when you already have a signer and want to create a smart wallet without\n   * creating an embedded wallet. You must provide your own signer and owners array.\n   * @param params - Smart wallet creation parameters\n   * @param params.owners - Array of owners for the smart wallet (addresses or WebAuthn public keys)\n   * @param params.signer - Local account used for signing transactions\n   * @param params.nonce - Optional nonce for smart wallet address generation (defaults to 0)\n   * @returns Promise resolving to the created smart wallet instance\n   */ async createSmartWallet(params) {\n        const { owners, signer, nonce } = params;\n        return this.smartWalletProvider.createWallet({\n            owners,\n            signer,\n            nonce\n        });\n    }\n    /**\n   * Create a new smart wallet with embedded wallet as signer\n   * @description Creates both an embedded wallet and a smart wallet, with the embedded wallet\n   * automatically added as one of the owners/signers of the smart wallet.\n   * @param params - Optional wallet creation parameters\n   * @param params.owners - Optional array of additional owners for the smart wallet. The embedded wallet will be added to this array at the specified index.\n   * @param params.embeddedWalletIndex - Optional index where the embedded wallet should be inserted in the owners array. If not specified, embedded wallet is added to the end of the array.\n   * @param params.nonce - Optional nonce for smart wallet address generation (defaults to 0)\n   * @returns Promise resolving to the created smart wallet instance\n   */ async createWalletWithEmbeddedSigner(params) {\n        const { owners: ownersParam, embeddedWalletIndex, nonce } = params || {};\n        const embeddedWallet = await this.embeddedWalletProvider.createWallet();\n        const account = await embeddedWallet.account();\n        let owners;\n        if (ownersParam) {\n            owners = [\n                ...ownersParam\n            ];\n            const insertIndex = embeddedWalletIndex ?? owners.length;\n            owners.splice(insertIndex, 0, embeddedWallet.address);\n        } else {\n            owners = [\n                embeddedWallet.address\n            ];\n        }\n        return this.smartWalletProvider.createWallet({\n            owners,\n            signer: account,\n            nonce\n        });\n    }\n    /**\n   * Get an existing smart wallet using embedded wallet as signer\n   * @description Retrieves an embedded wallet by walletId and uses it as the signer to get\n   * the corresponding smart wallet. This is useful when you have\n   * an embedded wallet ID and want to access the associated smart wallet functionality.\n   * @dev If neither walletAddress nor deploymentOwners is provided,\n   * defaults to using the embedded wallet as the single owner.\n   * @param params - Wallet retrieval parameters\n   * @param params.walletId - ID of the embedded wallet to use as signer\n   * @param params.deploymentOwners - Optional array of original deployment owners for smart wallet address calculation. If not provided and walletAddress is also not provided, defaults to using the embedded wallet as single owner.\n   * @param params.signerOwnerIndex - Current index of the signer in the smart wallet's current owners array (used for transaction signing). Defaults to 0 if not specified. This may differ from the original deployment index if owners have been modified.\n   * @param params.walletAddress - Optional explicit smart wallet address (skips address calculation)\n   * @param params.nonce - Optional nonce used during smart wallet creation\n   * @returns Promise resolving to the smart wallet instance with embedded wallet as signer\n   * @throws Error if embedded wallet is not found\n   */ async getSmartWalletWithEmbeddedSigner(params) {\n        const { walletId, deploymentOwners, walletAddress } = params;\n        const embeddedWallet = await this.embeddedWalletProvider.getWallet({\n            walletId\n        });\n        if (!embeddedWallet) {\n            throw new Error(\"Embedded wallet not found\");\n        }\n        const account = await embeddedWallet.account();\n        const finalDeploymentOwners = deploymentOwners || (walletAddress ? void 0 : [\n            embeddedWallet.address\n        ]);\n        return this.getSmartWallet({\n            signer: account,\n            ...params,\n            deploymentOwners: finalDeploymentOwners\n        });\n    }\n    /**\n   * Get an existing embedded wallet\n   * @description Retrieves an embedded wallet by walletId. This is useful when you have an embedded wallet ID and\n   * want to access the associated embedded wallet functionality.\n   * @param params - Wallet retrieval parameters\n   * @param params.walletId - ID of the embedded wallet to retrieve\n   * @returns Promise resolving to the embedded wallet instance\n   */ async getEmbeddedWallet(params) {\n        const { walletId } = params;\n        return this.embeddedWalletProvider.getWallet({\n            walletId\n        });\n    }\n    /**\n   * Get an existing smart wallet with a provided signer\n   * @description Retrieves a smart wallet using a directly provided signer. This is useful when\n   * you already have a LocalAccount signer and want to access an existing smart wallet without\n   * going through the embedded wallet provider. Use this instead of getSmartWalletWithEmbeddedSigner\n   * when you have direct control over the signer.\n   * @param signer - Local account to use for signing transactions on the smart wallet\n   * @param getWalletParams - Wallet retrieval parameters\n   * @param getWalletParams.deploymentOwners - Array of original deployment owners for smart wallet address calculation. Required if walletAddress not provided. Must match the exact owners array used during wallet deployment.\n   * @param getWalletParams.signerOwnerIndex - Current index of the signer in the smart wallet's current owners array (used for transaction signing). Defaults to 0 if not specified. This may differ from the original deployment index if owners have been modified.\n   * @param getWalletParams.walletAddress - Optional explicit smart wallet address (skips address calculation)\n   * @param getWalletParams.nonce - Optional nonce used during smart wallet creation\n   * @returns Promise resolving to the smart wallet instance with the provided signer\n   * @throws Error if neither walletAddress nor deploymentOwners provided\n   */ async getSmartWallet(params) {\n        const { signer, deploymentOwners, signerOwnerIndex, walletAddress: walletAddressParam, nonce } = params;\n        if (!walletAddressParam && !deploymentOwners) {\n            try {\n                throw new Error(\"Either walletAddress or deploymentOwners array must be provided to locate the smart wallet\");\n            } catch (error) {\n                console.error(error);\n                throw new Error(\"Either walletAddress or deploymentOwners array must be provided to locate the smart wallet\");\n            }\n        }\n        const ownerIndex = signerOwnerIndex ?? 0;\n        const walletAddress = walletAddressParam || await this.smartWalletProvider.getWalletAddress({\n            // Safe to use ! since we validated above\n            owners: deploymentOwners,\n            nonce\n        });\n        return this.smartWalletProvider.getWallet({\n            walletAddress,\n            signer,\n            ownerIndex\n        });\n    }\n};\n// src/wallet/providers/PrivyEmbeddedWalletProvider.ts\n\n// src/wallet/PrivyWallet.ts\n\n\n\n// src/wallet/base/wallets/EmbeddedWallet.ts\nvar EmbeddedWallet = class {\n    /**\n   * Create an embedded wallet instance\n   * @param address - The wallet's Ethereum address\n   */ constructor(address, walletId){\n        this.address = address;\n        this.walletId = walletId;\n    }\n};\n// src/wallet/PrivyWallet.ts\nvar PrivyWallet = class extends EmbeddedWallet {\n    //   private lendProvider: LendProvider;\n    /**\n   * Create a new Privy wallet provider\n   * @param appId - Privy application ID\n   * @param appSecret - Privy application secret\n   * @param verbs - Verbs instance for accessing configured providers\n   */ constructor(privyClient, walletId, address, chainManager){\n        super(address, walletId);\n        this.privyClient = privyClient;\n        this.walletId = walletId;\n        this.chainManager = chainManager;\n    }\n    /**\n   * Create a LocalAccount from this Privy wallet\n   * @description Converts the Privy wallet into a viem-compatible LocalAccount that can sign\n   * messages and transactions. The returned account uses Privy's signing infrastructure\n   * under the hood while providing a standard viem interface.\n   * @returns Promise resolving to a LocalAccount configured for signing operations\n   * @throws Error if wallet retrieval fails or signing operations are not supported\n   */ async account() {\n        const account = await (0,_privy_io_server_auth_viem__WEBPACK_IMPORTED_MODULE_16__.createViemAccount)({\n            walletId: this.walletId,\n            address: this.address,\n            // TODO: Fix this type error\n            privy: this.privyClient\n        });\n        return account;\n    }\n    /**\n   * Create a WalletClient for this Privy wallet\n   * @description Creates a viem-compatible WalletClient configured with this wallet's account\n   * and the specified chain. The returned client can be used to send transactions and interact\n   * with smart contracts using Privy's signing infrastructure under the hood.\n   * @param chainId - The chain ID to create the wallet client for\n   * @returns Promise resolving to a WalletClient configured for the specified chain\n   * @throws Error if chain is not supported or wallet client creation fails\n   */ async walletClient(chainId) {\n        const account = await this.account();\n        return (0,viem__WEBPACK_IMPORTED_MODULE_17__.createWalletClient)({\n            account,\n            chain: this.chainManager.getChain(chainId),\n            transport: (0,viem__WEBPACK_IMPORTED_MODULE_2__.http)(this.chainManager.getRpcUrl(chainId))\n        });\n    }\n    // ⚠️  WARNING: TECH DEBT BELOW ⚠️\n    // =====================================\n    // The methods below this comment are legacy tech debt from the POC\n    // and will most likely be REMOVED in a future refactor.\n    //\n    // DO NOT rely on these methods in production code!\n    // DO NOT extend or modify these methods!\n    //\n    // If you need this functionality, please discuss with the team\n    // before using or building upon these methods.\n    // =====================================\n    /**\n   * Lend assets to a lending market\n   * @description Lends assets using the configured lending provider with human-readable amounts\n   * @param amount - Human-readable amount to lend (e.g. 1.5)\n   * @param asset - Asset symbol (e.g. 'usdc') or token address\n   * @param marketId - Optional specific market ID or vault name\n   * @param options - Optional lending configuration\n   * @returns Promise resolving to lending transaction details\n   * @throws Error if no lending provider is configured\n   */ //   async lend(\n    //     amount: number,\n    //     asset: AssetIdentifier,\n    //     marketId?: string,\n    //     options?: LendOptions\n    //   ): Promise<LendTransaction> {\n    //     // Parse human-readable inputs\n    //     // TODO: Get actual chain ID from wallet context, for now using Unichain\n    //     const { amount: parsedAmount, asset: resolvedAsset } = parseLendParams(\n    //       amount,\n    //       asset,\n    //       unichain.id\n    //     );\n    //     // Set receiver to wallet address if not specified\n    //     const lendOptions: LendOptions = {\n    //       ...options,\n    //       receiver: options?.receiver || this.address,\n    //     };\n    //     const result = await this.lendProvider.deposit(\n    //       resolvedAsset.address,\n    //       parsedAmount,\n    //       marketId,\n    //       lendOptions\n    //     );\n    //     return result;\n    //   }\n    /**\n   * Sign a transaction without sending it\n   * @description Signs a transaction using the configured wallet provider but doesn't send it\n   * @param transactionData - Transaction data to sign\n   * @returns Promise resolving to signed transaction\n   * @throws Error if wallet is not initialized or no wallet provider is configured\n   */ async sign(transactionData) {\n        return await this.signOnly(transactionData);\n    }\n    /**\n   * Sign a transaction without sending it\n   * @description Signs a transaction using Privy's wallet API but doesn't send it\n   * @param walletId - Wallet ID to use for signing\n   * @param transactionData - Transaction data to sign\n   * @returns Promise resolving to signed transaction\n   * @throws Error if transaction signing fails\n   */ async signOnly(transactionData) {\n        try {\n            const privyWallet = await this.privyClient.walletApi.getWallet({\n                id: this.walletId\n            });\n            const publicClient = this.chainManager.getPublicClient(viem_chains__WEBPACK_IMPORTED_MODULE_5__.unichain.id);\n            const gasLimit = await publicClient.estimateGas({\n                account: privyWallet.address,\n                to: transactionData.to,\n                data: transactionData.data,\n                value: BigInt(transactionData.value)\n            });\n            const feeData = await publicClient.estimateFeesPerGas();\n            const nonce = await publicClient.getTransactionCount({\n                address: privyWallet.address,\n                blockTag: \"pending\"\n            });\n            const txParams = {\n                to: transactionData.to,\n                data: transactionData.data,\n                value: transactionData.value,\n                chainId: 130,\n                // Unichain\n                type: 2,\n                // EIP-1559\n                gasLimit: `0x${gasLimit.toString(16)}`,\n                maxFeePerGas: `0x${(feeData.maxFeePerGas || BigInt(1e9)).toString(16)}`,\n                // fallback to 1 gwei\n                maxPriorityFeePerGas: `0x${(feeData.maxPriorityFeePerGas || BigInt(1e8)).toString(16)}`,\n                // fallback to 0.1 gwei\n                nonce: `0x${nonce.toString(16)}`\n            };\n            console.log(`[PRIVY_PROVIDER] Complete tx params - Type: ${txParams.type}, Nonce: ${nonce}, Limit: ${gasLimit}, MaxFee: ${feeData.maxFeePerGas || \"fallback\"}, Priority: ${feeData.maxPriorityFeePerGas || \"fallback\"}`);\n            const response = await this.privyClient.walletApi.ethereum.signTransaction({\n                walletId: this.walletId,\n                transaction: txParams\n            });\n            return response.signedTransaction;\n        } catch (error) {\n            throw new Error(`Failed to sign transaction for wallet ${this.walletId}: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n        }\n    }\n    /**\n   * Send a signed transaction\n   * @description Sends a pre-signed transaction to the network\n   * @param signedTransaction - Signed transaction to send\n   * @param publicClient - Viem public client to send the transaction\n   * @returns Promise resolving to transaction hash\n   */ async send(signedTransaction, publicClient) {\n        try {\n            const hash = await publicClient.sendRawTransaction({\n                serializedTransaction: signedTransaction\n            });\n            return hash;\n        } catch (error) {\n            throw new Error(`Failed to send transaction: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n        }\n    }\n};\n// src/wallet/base/providers/EmbeddedWalletProvider.ts\nvar EmbeddedWalletProvider = class {\n};\n// src/wallet/providers/PrivyEmbeddedWalletProvider.ts\nvar PrivyEmbeddedWalletProvider = class extends EmbeddedWalletProvider {\n    //   private lendProvider: LendProvider;\n    /**\n   * Create a new Privy wallet provider\n   * @param privyClient - Privy client instance\n   */ constructor(privyClient, chainManager){\n        super();\n        this.privy = privyClient;\n        this.chainManager = chainManager;\n    }\n    /**\n   * Create new wallet via Privy\n   * @description Creates a new wallet using Privy's wallet API\n   * @returns Promise resolving to new wallet instance\n   * @throws Error if wallet creation fails\n   */ async createWallet() {\n        try {\n            const wallet = await this.privy.walletApi.createWallet({\n                chainType: \"ethereum\"\n            });\n            const walletInstance = new PrivyWallet(this.privy, wallet.id, (0,viem__WEBPACK_IMPORTED_MODULE_18__.getAddress)(wallet.address), this.chainManager);\n            return walletInstance;\n        } catch (error) {\n            console.error(\"Failed to create wallet: \", error);\n            throw new Error(`Failed to create wallet: ${error}`);\n        }\n    }\n    /**\n   * Get wallet by wallet ID via Privy\n   * @description Retrieves wallet information from Privy service\n   * @param params - Parameters containing walletId\n   * @returns Promise resolving to wallet\n   */ async getWallet(params) {\n        try {\n            const wallet = await this.privy.walletApi.getWallet({\n                id: params.walletId\n            });\n            const walletInstance = new PrivyWallet(this.privy, wallet.id, (0,viem__WEBPACK_IMPORTED_MODULE_18__.getAddress)(wallet.address), this.chainManager);\n            return walletInstance;\n        } catch  {\n            throw new Error(`Failed to get wallet with id: ${params.walletId}`);\n        }\n    }\n    /**\n   * Get all wallets via Privy\n   * @description Retrieves all wallets from Privy service with optional filtering\n   * @param options - Optional parameters for filtering and pagination\n   * @returns Promise resolving to array of wallets\n   */ async getAllWallets(options) {\n        try {\n            const response = await this.privy.walletApi.getWallets({\n                limit: options?.limit,\n                cursor: options?.cursor\n            });\n            return response.data.map((wallet)=>{\n                const walletInstance = new PrivyWallet(this.privy, wallet.id, (0,viem__WEBPACK_IMPORTED_MODULE_18__.getAddress)(wallet.address), this.chainManager);\n                return walletInstance;\n            });\n        } catch  {\n            throw new Error(\"Failed to retrieve wallets\");\n        }\n    }\n};\n// src/index.ts\n\nvar MyceliumSDK = class {\n    constructor(config){\n        this._chainManager = new ChainManager(config.chains || [\n            {\n                chainId: viem_chains__WEBPACK_IMPORTED_MODULE_5__.unichain.id,\n                rpcUrl: viem_chains__WEBPACK_IMPORTED_MODULE_5__.unichain.rpcUrls.default.http[0]\n            }\n        ]);\n        this.wallet = this.createWalletNamespace(config.walletsConfig);\n    }\n    /**\n   * Get the chain manager instance\n   * @returns ChainManager instance for multi-chain operations\n   */ get chainManager() {\n        return this._chainManager;\n    }\n    /**\n   * Create the wallet provider instance\n   * @param config - Wallet configuration\n   * @returns WalletProvider instance\n   */ createWalletProvider(config) {\n        if (config.embeddedWalletConfig.provider.type === \"privy\") {\n            const privyClient = new _privy_io_server_auth__WEBPACK_IMPORTED_MODULE_19__.PrivyClient(config.embeddedWalletConfig.provider.providerConfig.appId, config.embeddedWalletConfig.provider.providerConfig.appSecret);\n            this.embeddedWalletProvider = new PrivyEmbeddedWalletProvider(// config.embeddedWalletConfig.provider.privyClient,\n            privyClient, this._chainManager);\n        } else {\n            throw new Error(`Unsupported embedded wallet provider: ${config.embeddedWalletConfig.provider.type}`);\n        }\n        if (!config.smartWalletConfig || config.smartWalletConfig.provider.type === \"default\") {\n            this.smartWalletProvider = new DefaultSmartWalletProvider(this.chainManager);\n        } else {\n            throw new Error(`Unsupported smart wallet provider: ${config.smartWalletConfig.provider.type}`);\n        }\n        const walletProvider = new WalletProvider(this.embeddedWalletProvider, this.smartWalletProvider);\n        return walletProvider;\n    }\n    /**\n   * Create the wallet namespace instance\n   * @param config - Wallet configuration\n   * @returns WalletNamespace instance\n   */ createWalletNamespace(config) {\n        const walletProvider = this.createWalletProvider(config);\n        return new WalletNamespace(walletProvider);\n    }\n};\nvar index_default = MyceliumSDK;\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../sdk/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./src/app/api/sdk/create-wallet/route.ts":
/*!************************************************!*\
  !*** ./src/app/api/sdk/create-wallet/route.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/../../node_modules/next/dist/api/server.js\");\n/* harmony import */ var _libs_MyceliumService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/libs/MyceliumService */ \"(rsc)/./src/libs/MyceliumService.ts\");\n/* harmony import */ var _libs_WalletDatabase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/libs/WalletDatabase */ \"(rsc)/./src/libs/WalletDatabase.ts\");\n\n\n\nasync function POST(request) {\n    try {\n        const { userId } = await request.json();\n        if (!userId) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"User ID is required\"\n            }, {\n                status: 400\n            });\n        }\n        const walletDb = _libs_WalletDatabase__WEBPACK_IMPORTED_MODULE_2__.WalletDatabase.getInstance();\n        await walletDb.init();\n        const myceliumService = _libs_MyceliumService__WEBPACK_IMPORTED_MODULE_1__.MyceliumService.getInstance();\n        await myceliumService.init();\n        const result = await myceliumService.createWallet();\n        await walletDb.saveWallet(userId, result.walletId, result.walletAddress);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            walletId: result.walletId,\n            walletAddress: result.walletAddress,\n            success: true\n        });\n    } catch (error) {\n        console.error(\"Error creating wallet:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: `Failed to create wallet: ${error}`\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9zZGsvY3JlYXRlLXdhbGxldC9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXdEO0FBQ0M7QUFDRjtBQUVoRCxlQUFlRyxLQUFLQyxPQUFvQjtJQUM3QyxJQUFJO1FBQ0YsTUFBTSxFQUFFQyxNQUFNLEVBQUUsR0FBRyxNQUFNRCxRQUFRRSxJQUFJO1FBRXJDLElBQUksQ0FBQ0QsUUFBUTtZQUNYLE9BQU9MLHFEQUFZQSxDQUFDTSxJQUFJLENBQ3RCO2dCQUFFQyxPQUFPO1lBQXNCLEdBQy9CO2dCQUFFQyxRQUFRO1lBQUk7UUFFbEI7UUFFQSxNQUFNQyxXQUFXUCxnRUFBY0EsQ0FBQ1EsV0FBVztRQUMzQyxNQUFNRCxTQUFTRSxJQUFJO1FBRW5CLE1BQU1DLGtCQUFrQlgsa0VBQWVBLENBQUNTLFdBQVc7UUFDbkQsTUFBTUUsZ0JBQWdCRCxJQUFJO1FBRTFCLE1BQU1FLFNBQVMsTUFBTUQsZ0JBQWdCRSxZQUFZO1FBRWpELE1BQU1MLFNBQVNNLFVBQVUsQ0FBQ1YsUUFBUVEsT0FBT0csUUFBUSxFQUFFSCxPQUFPSSxhQUFhO1FBRXZFLE9BQU9qQixxREFBWUEsQ0FBQ00sSUFBSSxDQUFDO1lBQ3ZCVSxVQUFVSCxPQUFPRyxRQUFRO1lBQ3pCQyxlQUFlSixPQUFPSSxhQUFhO1lBQ25DQyxTQUFTO1FBQ1g7SUFDRixFQUFFLE9BQU9YLE9BQU87UUFDZFksUUFBUVosS0FBSyxDQUFDLDBCQUEwQkE7UUFDeEMsT0FBT1AscURBQVlBLENBQUNNLElBQUksQ0FDdEI7WUFBRUMsT0FBTyxDQUFDLHlCQUF5QixFQUFFQSxPQUFPO1FBQUMsR0FDN0M7WUFBRUMsUUFBUTtRQUFJO0lBRWxCO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZG1pbi9Eb2N1bWVudHMvcHJvamVjdHMvbXljZWxpdW0tc2RrL3BhY2thZ2VzL2Zyb250ZW5kL3NyYy9hcHAvYXBpL3Nkay9jcmVhdGUtd2FsbGV0L3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tIFwibmV4dC9zZXJ2ZXJcIjtcbmltcG9ydCB7IE15Y2VsaXVtU2VydmljZSB9IGZyb20gXCJAL2xpYnMvTXljZWxpdW1TZXJ2aWNlXCI7XG5pbXBvcnQgeyBXYWxsZXREYXRhYmFzZSB9IGZyb20gXCJAL2xpYnMvV2FsbGV0RGF0YWJhc2VcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB7IHVzZXJJZCB9ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XG5cbiAgICBpZiAoIXVzZXJJZCkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiBcIlVzZXIgSUQgaXMgcmVxdWlyZWRcIiB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3Qgd2FsbGV0RGIgPSBXYWxsZXREYXRhYmFzZS5nZXRJbnN0YW5jZSgpO1xuICAgIGF3YWl0IHdhbGxldERiLmluaXQoKTtcblxuICAgIGNvbnN0IG15Y2VsaXVtU2VydmljZSA9IE15Y2VsaXVtU2VydmljZS5nZXRJbnN0YW5jZSgpO1xuICAgIGF3YWl0IG15Y2VsaXVtU2VydmljZS5pbml0KCk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBteWNlbGl1bVNlcnZpY2UuY3JlYXRlV2FsbGV0KCk7XG5cbiAgICBhd2FpdCB3YWxsZXREYi5zYXZlV2FsbGV0KHVzZXJJZCwgcmVzdWx0LndhbGxldElkLCByZXN1bHQud2FsbGV0QWRkcmVzcyk7XG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgd2FsbGV0SWQ6IHJlc3VsdC53YWxsZXRJZCxcbiAgICAgIHdhbGxldEFkZHJlc3M6IHJlc3VsdC53YWxsZXRBZGRyZXNzLFxuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgY3JlYXRpbmcgd2FsbGV0OlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBlcnJvcjogYEZhaWxlZCB0byBjcmVhdGUgd2FsbGV0OiAke2Vycm9yfWAgfSxcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJNeWNlbGl1bVNlcnZpY2UiLCJXYWxsZXREYXRhYmFzZSIsIlBPU1QiLCJyZXF1ZXN0IiwidXNlcklkIiwianNvbiIsImVycm9yIiwic3RhdHVzIiwid2FsbGV0RGIiLCJnZXRJbnN0YW5jZSIsImluaXQiLCJteWNlbGl1bVNlcnZpY2UiLCJyZXN1bHQiLCJjcmVhdGVXYWxsZXQiLCJzYXZlV2FsbGV0Iiwid2FsbGV0SWQiLCJ3YWxsZXRBZGRyZXNzIiwic3VjY2VzcyIsImNvbnNvbGUiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/sdk/create-wallet/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/libs/MyceliumService.ts":
/*!*************************************!*\
  !*** ./src/libs/MyceliumService.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MyceliumService: () => (/* binding */ MyceliumService),\n/* harmony export */   myceliumService: () => (/* binding */ myceliumService)\n/* harmony export */ });\n/* harmony import */ var _mycelium_sdk_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @mycelium-sdk/core */ \"(rsc)/../sdk/dist/index.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem/chains */ \"(rsc)/../../node_modules/viem/_esm/chains/definitions/sepolia.js\");\n\n\nclass MyceliumService {\n    constructor(){\n        this.sdk = null;\n        this.initialized = false;\n    }\n    static getInstance() {\n        if (!MyceliumService.instance) {\n            MyceliumService.instance = new MyceliumService();\n        }\n        return MyceliumService.instance;\n    }\n    async init() {\n        if (this.initialized) return;\n        try {\n            this.sdk = new _mycelium_sdk_core__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n                walletsConfig: {\n                    embeddedWalletConfig: {\n                        provider: {\n                            type: \"privy\",\n                            providerConfig: {\n                                appId: \"cm6ph1njd02e8cy7y6vti8lp1\",\n                                appSecret: \"2dfBFkb5Rn55sZrRbHLFrP1omdoon51pCgqGUGbmfkuqDnh2uoxHQ5ig5MLvEB2T4rXzd1DF92G4rQBNGfV8EpUA\"\n                            }\n                        }\n                    },\n                    smartWalletConfig: {\n                        provider: {\n                            type: \"default\"\n                        }\n                    }\n                },\n                chains: [\n                    {\n                        chainId: viem_chains__WEBPACK_IMPORTED_MODULE_1__.sepolia.id,\n                        rpcUrl: viem_chains__WEBPACK_IMPORTED_MODULE_1__.sepolia.rpcUrls.default.http[0],\n                        bundlerUrl: \"https://rpc.zerodev.app/api/v3/82e47083-d513-4948-b013-bacce477bb1d/chain/11155111\"\n                    }\n                ]\n            });\n            this.initialized = true;\n            console.log(\"MyceliumService initialized\");\n        } catch (error) {\n            throw new Error(`Failed to initialize MyceliumService: ${error}`);\n        }\n    }\n    async createWallet() {\n        if (!this.sdk) {\n            throw new Error(\"SDK not initialized\");\n        }\n        const embeddedWallet = await this.sdk.wallet.createEmbeddedWallet();\n        const embeddedWalletId = embeddedWallet.walletId;\n        console.log(\"Embedded wallet ID: \", embeddedWalletId);\n        const wallet = await this.sdk.wallet.createSmartWallet({\n            owners: [\n                embeddedWallet.address\n            ],\n            signer: await embeddedWallet.account()\n        });\n        return {\n            walletId: embeddedWalletId,\n            walletAddress: await wallet.getAddress()\n        };\n    }\n    async getWallet(existingWallet) {\n        if (!this.sdk) {\n            throw new Error(\"SDK not initialized\");\n        }\n        const wallet = await this.sdk.wallet.getSmartWalletWithEmbeddedSigner({\n            walletId: existingWallet.wallet_id\n        });\n        return wallet;\n    }\n    async getWalletBalance(walletId) {\n        if (!this.sdk) {\n            throw new Error(\"SDK not initialized\");\n        }\n        const wallet = await this.sdk.wallet.getSmartWalletWithEmbeddedSigner({\n            walletId\n        });\n        const tokens = await wallet.getBalance();\n        return tokens.map((token)=>{\n            return {\n                symbol: token.symbol,\n                balance: token.totalBalance,\n                formattedBalance: token.totalFormattedBalance\n            };\n        });\n    }\n    //   async sendTransaction(walletId: string, transaction: any) {\n    //     if (!this.sdk) {\n    //       throw new Error(\"SDK not initialized\");\n    //     }\n    //     const wallet = await this.sdk.wallet.getSmartWalletWithEmbeddedSigner({\n    //       walletId,\n    //     });\n    //     return await wallet.sendTransaction(transaction);\n    //   }\n    getSDK() {\n        return this.sdk;\n    }\n}\nconst myceliumService = MyceliumService.getInstance();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/libs/MyceliumService.ts\n");

/***/ }),

/***/ "(rsc)/./src/libs/WalletDatabase.ts":
/*!************************************!*\
  !*** ./src/libs/WalletDatabase.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WalletDatabase: () => (/* binding */ WalletDatabase),\n/* harmony export */   walletDB: () => (/* binding */ walletDB)\n/* harmony export */ });\n/* harmony import */ var sqlite3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sqlite3 */ \"sqlite3\");\n/* harmony import */ var sqlite3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sqlite3__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var sqlite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sqlite */ \"(rsc)/../../node_modules/sqlite/build/index.mjs\");\n\n\nclass WalletDatabase {\n    constructor(){\n        this.db = null;\n        this.initialized = false;\n    }\n    static getInstance() {\n        if (!WalletDatabase.instance) {\n            WalletDatabase.instance = new WalletDatabase();\n        }\n        return WalletDatabase.instance;\n    }\n    async init() {\n        if (this.initialized) return;\n        try {\n            this.db = await (0,sqlite__WEBPACK_IMPORTED_MODULE_1__.open)({\n                filename: \"./wallets.db\",\n                driver: (sqlite3__WEBPACK_IMPORTED_MODULE_0___default().Database)\n            });\n            await this.createTables();\n            this.initialized = true;\n            console.log(\"WalletDatabase initialized successfully\");\n        } catch (error) {\n            throw new Error(`Failed to initialize database: ${error}`);\n        }\n    }\n    async createTables() {\n        if (!this.db) throw new Error(\"Database not available\");\n        await this.db.exec(`\n      CREATE TABLE IF NOT EXISTS wallets (\n        user_id TEXT PRIMARY KEY,\n        wallet_id TEXT NOT NULL,\n        wallet_address TEXT NOT NULL,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n    }\n    async getWallet(userId) {\n        if (!this.db) throw new Error(\"Database not initialized\");\n        const wallet = await this.db.get(\"SELECT * FROM wallets WHERE user_id = ?\", [\n            userId\n        ]);\n        return wallet || null;\n    }\n    async saveWallet(userId, walletId, walletAddress) {\n        if (!this.db) throw new Error(\"Database not initialized\");\n        await this.db.run(\"INSERT OR REPLACE INTO wallets (user_id, wallet_id, wallet_address) VALUES (?, ?, ?)\", [\n            userId,\n            walletId,\n            walletAddress\n        ]);\n    }\n    async getAllWallets() {\n        if (!this.db) throw new Error(\"Database not initialized\");\n        return await this.db.all(\"SELECT * FROM wallets ORDER BY created_at DESC\");\n    }\n    async close() {\n        if (this.db) {\n            await this.db.close();\n            this.db = null;\n            this.initialized = false;\n        }\n    }\n}\nconst walletDB = WalletDatabase.getInstance();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGlicy9XYWxsZXREYXRhYmFzZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE4QjtBQUNVO0FBU2pDLE1BQU1FO0lBS1gsYUFBc0I7YUFIZEMsS0FBc0I7YUFDdEJDLGNBQXVCO0lBRVI7SUFFdkIsT0FBT0MsY0FBOEI7UUFDbkMsSUFBSSxDQUFDSCxlQUFlSSxRQUFRLEVBQUU7WUFDNUJKLGVBQWVJLFFBQVEsR0FBRyxJQUFJSjtRQUNoQztRQUNBLE9BQU9BLGVBQWVJLFFBQVE7SUFDaEM7SUFFQSxNQUFNQyxPQUFzQjtRQUMxQixJQUFJLElBQUksQ0FBQ0gsV0FBVyxFQUFFO1FBRXRCLElBQUk7WUFDRixJQUFJLENBQUNELEVBQUUsR0FBRyxNQUFNRiw0Q0FBSUEsQ0FBQztnQkFDbkJPLFVBQVU7Z0JBQ1ZDLFFBQVFULHlEQUFnQjtZQUMxQjtZQUVBLE1BQU0sSUFBSSxDQUFDVyxZQUFZO1lBQ3ZCLElBQUksQ0FBQ1AsV0FBVyxHQUFHO1lBQ25CUSxRQUFRQyxHQUFHLENBQUM7UUFDZCxFQUFFLE9BQU9DLE9BQU87WUFDZCxNQUFNLElBQUlDLE1BQU0sQ0FBQywrQkFBK0IsRUFBRUQsT0FBTztRQUMzRDtJQUNGO0lBRUEsTUFBY0gsZUFBOEI7UUFDMUMsSUFBSSxDQUFDLElBQUksQ0FBQ1IsRUFBRSxFQUFFLE1BQU0sSUFBSVksTUFBTTtRQUU5QixNQUFNLElBQUksQ0FBQ1osRUFBRSxDQUFDYSxJQUFJLENBQUMsQ0FBQzs7Ozs7OztJQU9wQixDQUFDO0lBQ0g7SUFFQSxNQUFNQyxVQUFVQyxNQUFjLEVBQWdDO1FBQzVELElBQUksQ0FBQyxJQUFJLENBQUNmLEVBQUUsRUFBRSxNQUFNLElBQUlZLE1BQU07UUFFOUIsTUFBTUksU0FBUyxNQUFNLElBQUksQ0FBQ2hCLEVBQUUsQ0FBQ2lCLEdBQUcsQ0FDOUIsMkNBQ0E7WUFBQ0Y7U0FBTztRQUVWLE9BQU9DLFVBQVU7SUFDbkI7SUFFQSxNQUFNRSxXQUNKSCxNQUFjLEVBQ2RJLFFBQWdCLEVBQ2hCQyxhQUFxQixFQUNOO1FBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQ3BCLEVBQUUsRUFBRSxNQUFNLElBQUlZLE1BQU07UUFFOUIsTUFBTSxJQUFJLENBQUNaLEVBQUUsQ0FBQ3FCLEdBQUcsQ0FDZix3RkFDQTtZQUFDTjtZQUFRSTtZQUFVQztTQUFjO0lBRXJDO0lBRUEsTUFBTUUsZ0JBQXlDO1FBQzdDLElBQUksQ0FBQyxJQUFJLENBQUN0QixFQUFFLEVBQUUsTUFBTSxJQUFJWSxNQUFNO1FBRTlCLE9BQU8sTUFBTSxJQUFJLENBQUNaLEVBQUUsQ0FBQ3VCLEdBQUcsQ0FBQztJQUMzQjtJQUVBLE1BQU1DLFFBQXVCO1FBQzNCLElBQUksSUFBSSxDQUFDeEIsRUFBRSxFQUFFO1lBQ1gsTUFBTSxJQUFJLENBQUNBLEVBQUUsQ0FBQ3dCLEtBQUs7WUFDbkIsSUFBSSxDQUFDeEIsRUFBRSxHQUFHO1lBQ1YsSUFBSSxDQUFDQyxXQUFXLEdBQUc7UUFDckI7SUFDRjtBQUNGO0FBRU8sTUFBTXdCLFdBQVcxQixlQUFlRyxXQUFXLEdBQUciLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZG1pbi9Eb2N1bWVudHMvcHJvamVjdHMvbXljZWxpdW0tc2RrL3BhY2thZ2VzL2Zyb250ZW5kL3NyYy9saWJzL1dhbGxldERhdGFiYXNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzcWxpdGUzIGZyb20gXCJzcWxpdGUzXCI7XG5pbXBvcnQgeyBvcGVuLCBEYXRhYmFzZSB9IGZyb20gXCJzcWxpdGVcIjtcblxuZXhwb3J0IGludGVyZmFjZSBXYWxsZXRSZWNvcmQge1xuICB1c2VyX2lkOiBzdHJpbmc7XG4gIHdhbGxldF9pZDogc3RyaW5nO1xuICB3YWxsZXRfYWRkcmVzczogc3RyaW5nO1xuICBjcmVhdGVkX2F0OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBXYWxsZXREYXRhYmFzZSB7XG4gIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBXYWxsZXREYXRhYmFzZTtcbiAgcHJpdmF0ZSBkYjogRGF0YWJhc2UgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBpbml0aWFsaXplZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxuXG4gIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBXYWxsZXREYXRhYmFzZSB7XG4gICAgaWYgKCFXYWxsZXREYXRhYmFzZS5pbnN0YW5jZSkge1xuICAgICAgV2FsbGV0RGF0YWJhc2UuaW5zdGFuY2UgPSBuZXcgV2FsbGV0RGF0YWJhc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIFdhbGxldERhdGFiYXNlLmluc3RhbmNlO1xuICB9XG5cbiAgYXN5bmMgaW5pdCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy5pbml0aWFsaXplZCkgcmV0dXJuO1xuXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuZGIgPSBhd2FpdCBvcGVuKHtcbiAgICAgICAgZmlsZW5hbWU6IFwiLi93YWxsZXRzLmRiXCIsXG4gICAgICAgIGRyaXZlcjogc3FsaXRlMy5EYXRhYmFzZSxcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCB0aGlzLmNyZWF0ZVRhYmxlcygpO1xuICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICBjb25zb2xlLmxvZyhcIldhbGxldERhdGFiYXNlIGluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseVwiKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gaW5pdGlhbGl6ZSBkYXRhYmFzZTogJHtlcnJvcn1gKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGNyZWF0ZVRhYmxlcygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoIXRoaXMuZGIpIHRocm93IG5ldyBFcnJvcihcIkRhdGFiYXNlIG5vdCBhdmFpbGFibGVcIik7XG5cbiAgICBhd2FpdCB0aGlzLmRiLmV4ZWMoYFxuICAgICAgQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgd2FsbGV0cyAoXG4gICAgICAgIHVzZXJfaWQgVEVYVCBQUklNQVJZIEtFWSxcbiAgICAgICAgd2FsbGV0X2lkIFRFWFQgTk9UIE5VTEwsXG4gICAgICAgIHdhbGxldF9hZGRyZXNzIFRFWFQgTk9UIE5VTEwsXG4gICAgICAgIGNyZWF0ZWRfYXQgREFURVRJTUUgREVGQVVMVCBDVVJSRU5UX1RJTUVTVEFNUFxuICAgICAgKVxuICAgIGApO1xuICB9XG5cbiAgYXN5bmMgZ2V0V2FsbGV0KHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxXYWxsZXRSZWNvcmQgfCBudWxsPiB7XG4gICAgaWYgKCF0aGlzLmRiKSB0aHJvdyBuZXcgRXJyb3IoXCJEYXRhYmFzZSBub3QgaW5pdGlhbGl6ZWRcIik7XG5cbiAgICBjb25zdCB3YWxsZXQgPSBhd2FpdCB0aGlzLmRiLmdldChcbiAgICAgIFwiU0VMRUNUICogRlJPTSB3YWxsZXRzIFdIRVJFIHVzZXJfaWQgPSA/XCIsXG4gICAgICBbdXNlcklkXVxuICAgICk7XG4gICAgcmV0dXJuIHdhbGxldCB8fCBudWxsO1xuICB9XG5cbiAgYXN5bmMgc2F2ZVdhbGxldChcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICB3YWxsZXRJZDogc3RyaW5nLFxuICAgIHdhbGxldEFkZHJlc3M6IHN0cmluZ1xuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoIXRoaXMuZGIpIHRocm93IG5ldyBFcnJvcihcIkRhdGFiYXNlIG5vdCBpbml0aWFsaXplZFwiKTtcblxuICAgIGF3YWl0IHRoaXMuZGIucnVuKFxuICAgICAgXCJJTlNFUlQgT1IgUkVQTEFDRSBJTlRPIHdhbGxldHMgKHVzZXJfaWQsIHdhbGxldF9pZCwgd2FsbGV0X2FkZHJlc3MpIFZBTFVFUyAoPywgPywgPylcIixcbiAgICAgIFt1c2VySWQsIHdhbGxldElkLCB3YWxsZXRBZGRyZXNzXVxuICAgICk7XG4gIH1cblxuICBhc3luYyBnZXRBbGxXYWxsZXRzKCk6IFByb21pc2U8V2FsbGV0UmVjb3JkW10+IHtcbiAgICBpZiAoIXRoaXMuZGIpIHRocm93IG5ldyBFcnJvcihcIkRhdGFiYXNlIG5vdCBpbml0aWFsaXplZFwiKTtcblxuICAgIHJldHVybiBhd2FpdCB0aGlzLmRiLmFsbChcIlNFTEVDVCAqIEZST00gd2FsbGV0cyBPUkRFUiBCWSBjcmVhdGVkX2F0IERFU0NcIik7XG4gIH1cblxuICBhc3luYyBjbG9zZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy5kYikge1xuICAgICAgYXdhaXQgdGhpcy5kYi5jbG9zZSgpO1xuICAgICAgdGhpcy5kYiA9IG51bGw7XG4gICAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCB3YWxsZXREQiA9IFdhbGxldERhdGFiYXNlLmdldEluc3RhbmNlKCk7XG4iXSwibmFtZXMiOlsic3FsaXRlMyIsIm9wZW4iLCJXYWxsZXREYXRhYmFzZSIsImRiIiwiaW5pdGlhbGl6ZWQiLCJnZXRJbnN0YW5jZSIsImluc3RhbmNlIiwiaW5pdCIsImZpbGVuYW1lIiwiZHJpdmVyIiwiRGF0YWJhc2UiLCJjcmVhdGVUYWJsZXMiLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJFcnJvciIsImV4ZWMiLCJnZXRXYWxsZXQiLCJ1c2VySWQiLCJ3YWxsZXQiLCJnZXQiLCJzYXZlV2FsbGV0Iiwid2FsbGV0SWQiLCJ3YWxsZXRBZGRyZXNzIiwicnVuIiwiZ2V0QWxsV2FsbGV0cyIsImFsbCIsImNsb3NlIiwid2FsbGV0REIiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/libs/WalletDatabase.ts\n");

/***/ }),

/***/ "(ssr)/../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!**********************************************************************************************************!*\
  !*** ../../node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \**********************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "node:buffer":
/*!******************************!*\
  !*** external "node:buffer" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:buffer");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:crypto");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:fs");

/***/ }),

/***/ "node:http":
/*!****************************!*\
  !*** external "node:http" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:http");

/***/ }),

/***/ "node:https":
/*!*****************************!*\
  !*** external "node:https" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:https");

/***/ }),

/***/ "node:net":
/*!***************************!*\
  !*** external "node:net" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:net");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:path");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream");

/***/ }),

/***/ "node:url":
/*!***************************!*\
  !*** external "node:url" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:url");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:util");

/***/ }),

/***/ "node:zlib":
/*!****************************!*\
  !*** external "node:zlib" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:zlib");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "sqlite3":
/*!**************************!*\
  !*** external "sqlite3" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("sqlite3");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/viem","vendor-chunks/@noble","vendor-chunks/node-fetch-native","vendor-chunks/libphonenumber-js","vendor-chunks/ox","vendor-chunks/svix","vendor-chunks/@hpke","vendor-chunks/zod","vendor-chunks/jose","vendor-chunks/@privy-io","vendor-chunks/abitype","vendor-chunks/@scure","vendor-chunks/ts-case-convert","vendor-chunks/uuid","vendor-chunks/fast-sha256","vendor-chunks/@stablelib","vendor-chunks/base-x","vendor-chunks/redaxios","vendor-chunks/canonicalize","vendor-chunks/bs58","vendor-chunks/sqlite"], () => (__webpack_exec__("(rsc)/../../node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsdk%2Fcreate-wallet%2Froute&page=%2Fapi%2Fsdk%2Fcreate-wallet%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsdk%2Fcreate-wallet%2Froute.ts&appDir=%2FUsers%2Fadmin%2FDocuments%2Fprojects%2Fmycelium-sdk%2Fpackages%2Ffrontend%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fadmin%2FDocuments%2Fprojects%2Fmycelium-sdk%2Fpackages%2Ffrontend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();